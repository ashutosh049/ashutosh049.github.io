<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Microlean</title>
    <link>https://ashutosh049.github.io/</link>
    <description>Recent content on Microlean</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 31 Aug 2020 13:09:42 -0600</lastBuildDate><atom:link href="https://ashutosh049.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Demystifying Spring Task Executor</title>
      <link>https://ashutosh049.github.io/post/demystifying_spring_task_executor/</link>
      <pubDate>Mon, 31 Aug 2020 13:09:42 -0600</pubDate>
      
      <guid>https://ashutosh049.github.io/post/demystifying_spring_task_executor/</guid>
      <description>corePoolSize vs. maxPoolSize vs. queueCapacity
@Bean @Primary public TaskExecutor taskExecutor() { ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor(); executor.setCorePoolSize(3); executor.setMaxPoolSize(6); executor.setQueueCapacity(4); executor.setWaitForTasksToCompleteOnShutdown(false); executor.setThreadNamePrefix(&amp;#34;my-async&amp;#34;); executor.initialize(); return executor; } Core pool size In a nut shell, Core pool size is the happy path. When a new task is submitted and fewer than Core Pool Size threads are running, a new thread is created to handle the request, even if other threads are idle. If there are greater than Core Pool Size but fewer than Max Pool Size threads running, a new thread is created only if no threads are idle.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ashutosh049.github.io/top/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ashutosh049.github.io/top/about/</guid>
      <description>Iâ€™ve been architecting, designing and implementing distributed applications since 2015, initially client-server applications written in C++ and Java deployed to UNIX/LINUX platforms. Beginning in 2011 I began working with highly-scaleable/highly-available microservice applications using Java, Erlang, and since 2015, Go. My current interests are in the areas of highly scalable/highly available distributed applications, Docker, Kubernetes, cloud architectures, and using Raspberry Pi clusters as a home lab. My blog reflects these interests1.</description>
    </item>
    
  </channel>
</rss>
