<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leetcode on Microlean</title>
    <link>https://ashutosh049.github.io/categories/leetcode/</link>
    <description>Recent content in Leetcode on Microlean</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 31 Aug 2020 13:09:42 -0600</lastBuildDate><atom:link href="https://ashutosh049.github.io/categories/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Add two numbers</title>
      <link>https://ashutosh049.github.io/post/add_two_numbers/leetcode/</link>
      <pubDate>Mon, 31 Aug 2020 13:09:42 -0600</pubDate>
      
      <guid>https://ashutosh049.github.io/post/add_two_numbers/leetcode/</guid>
      <description>2. Add Two NumbersMediumYou are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum&amp;nbsp;as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
&amp;nbsp;
Example 1:
Input: l1 = [2,4,3], l2 = [5,6,4]Output: [7,0,8]Explanation: 342 + 465 = 807.</description>
    </item>
    
    <item>
      <title>Binary Tree Depth/Height</title>
      <link>https://ashutosh049.github.io/post/binary-tree-maximum-depth/leetcode/</link>
      <pubDate>Mon, 31 Aug 2020 13:09:42 -0600</pubDate>
      
      <guid>https://ashutosh049.github.io/post/binary-tree-maximum-depth/leetcode/</guid>
      <description>You can refer to the Leetcode problem 104. Maximum Depth of Binary Tree
Problem Statement Given the root of a binary tree, return its maximum depth.
 A binary tree&amp;rsquo;s maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
 Example 1:
 (3)/ \(9) (20)/ \(15) (7)Input: root = [3,9,20,null,null,15,7] Output: 3</description>
    </item>
    
    <item>
      <title>Binary Tree Lowest Common Ancestor (LCA)</title>
      <link>https://ashutosh049.github.io/post/binary-tree-lowest-common-ancestor-lca/leetcode/</link>
      <pubDate>Mon, 31 Aug 2020 13:09:42 -0600</pubDate>
      
      <guid>https://ashutosh049.github.io/post/binary-tree-lowest-common-ancestor-lca/leetcode/</guid>
      <description>You can refer to the Leetcode problem 236. Lowest Common Ancestor of a Binary Tree
 Problem Statement Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.
 According to the definition of LCA on Wikipedia: â€œThe lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).</description>
    </item>
    
    <item>
      <title>Binary Tree path sum</title>
      <link>https://ashutosh049.github.io/post/binary-tree-path-sum/binary-tree-path-sum/</link>
      <pubDate>Mon, 31 Aug 2020 13:09:42 -0600</pubDate>
      
      <guid>https://ashutosh049.github.io/post/binary-tree-path-sum/binary-tree-path-sum/</guid>
      <description>You can refer to the Leetcode problem 112. Path Sum
Problem Statement Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.
 A leaf is a node with no children.
 Example 1:
Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22
Output: true Explanation: The root-to-leaf path with the target sum is shown.</description>
    </item>
    
  </channel>
</rss>
